===========================
Design Checkpoints 
===========================
.. contents:: Table of Contents
   :depth: 2

What is a Design Checkpoint?
================================
A design checkpoint (DCP) is a file used by the Vivado Design Suite that represents a snapshot of a design at any stage of the design process.  The snapshot includes the netlist, constraints and implementation results.  


What is Inside a Design Checkpoint?
====================================
A design checkpoint file (extention .dcp) is a Vivado file format that contains a synthesized netlist, design constraints and can contain placement and routing information.  RapidWright provides readers and writers to parse and export the various components  

Xilinx Design Language (XDL) vs. Design Checkpoint
===================================================
Prior to Vivado, users of Xilinx ISE could leverage tools like `RapidSmith <http://rapidsmith.sourceforge.net/>`_ or `Torc <http://torc-isi.github.io/torc/>`_ that relied on the Xilinx Design Language (XDL) in order to push and pull designs into an open source development environment.  XDL is not supported in Vivado and thus obsoleted these tools for newer architectures. Despite some valiant efforts to bridge the gap in capabilities, there still remain long import runtimes for these alternative approaches.

When Xilinx created Vivado, it added some significant complexity to how implementation results were stored.  These choices were made for good reason as it enables more complex netlist manipulation during the implementation flow that was quite difficult previously.  However, XDL was no longer a sufficient vehicle to carry the necessary information.  For example, the XDEF file found within the design checkpoint is the closest representation to the information content of XDL.  However, this file alone is no longer sufficient to continue implementation processes or generate bitstreams.  

The addition of the full hierarchical netlist and user constraint files in the design checkpoint are the main differentiators between XDL and design checkpoints.  XDL only had a single level, physical netlist of placed and routed cells. Design checkpoints, in contrast, maintain the full hierarchy of the user's original intent from RTL.  To illustrate the added complexity, consider the diagram below:

.. image:: images/logical_netlist.png
	:width: 550px
	:align: center

This figure shows the logical netlist connection of three cells over one physical net.  However, there are 11 separate nets in the logical netlist that must be traversed in order to make the connection.  In Vivado's design checkpoints, any modification to the netlist must be managed in the hierarchy, however, in XDL, there would have been only one net represented, the physical net as shown in the diagram below:

.. image:: images/physical_netlist.png
	:width: 550px
	:align: center

Overall, design checkpoints increase the complexity of handling designs, but they also open up more possibilities to innovate than with XDL.	

RapidWright and Design Checkpoint Files
========================================
RapidWright can freely read and write checkpoint files with the following exceptions:

  * If the design is encrypted, RapidWright cannot open it.  RapidWright is not capable of decrypting files.
  
    * Sometimes, however, a design may not be secured or designated to be encrypted but the EDIF file in the DCP is encrypted.  This is due to RTL source references being stored in the EDIF file. Vivado will allow you to write out an EDIF file (without RTL source references) with the ``write_edif`` Tcl command.  RapidWright can read in the alternate EDIF file along side the DCP if it has the same root name (.edf extension instead of .dcp).
	
  * If the design checkpoint file is created with a much newer version of Vivado compared with the RapidWright release, it may not be able to read the file.
  * Conversely, older versions of Vivado may not be able to read RapidWright checkpoint files
  
Here are a few ways to read/write a design checkpoint in RapidWright:

.. code-block:: java

	Design design = Design.readCheckpoint("my_design_routed.dcp");
	// or if the EDIF inside the DCP is encrypted because of source references, 
	//   you can alternatively supply a separate EDIF
	design = Design.readCheckpoint("my_design_routed.dcp", "my_design_edif.edf");

	// To write out a design
	design.writeCheckpoint("my_design_post_rapidwright.dcp");
	
The interface that enables RapidWright to read and write checkpoints is handled by the DCP interface tool in the provided dcp-interface-<ver>.jar.  The APIs in this tool are used in the Design class with readCheckpoint() and writeCheckpoint().  Note that it is licensed separately from the rest of RapidWright under a modified Xilinx EULA. 


